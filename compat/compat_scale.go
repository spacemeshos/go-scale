// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package compat

import (
	"github.com/spacemeshos/go-scale"
)

func (t *Struct) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact16(enc, uint16(t.Field1))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Field2[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Struct) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact16(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field1 = uint16(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Field2[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Byte32) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.Array[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Byte32) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.Array[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Compat) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact8(enc, uint8(t.Field1))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact16(enc, uint16(t.Field2))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.Field3))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.Field4))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Field5[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeBool(enc, t.Field6)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.Field7)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Field8.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructArray(enc, t.Field9[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteSlice(enc, t.Field10)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Field11)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeSliceOfByteSlice(enc, t.Field12)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Field13)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Compat) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact8(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field1 = uint8(field)
	}
	{
		field, n, err := scale.DecodeCompact16(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field2 = uint16(field)
	}
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field3 = uint32(field)
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field4 = uint64(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Field5[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeBool(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field6 = field
	}
	{
		field, n, err := scale.DecodeOption[Struct](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field7 = field
	}
	{
		n, err := t.Field8.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeStructArray(dec, t.Field9[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeByteSlice(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field10 = field
	}
	{
		field, n, err := scale.DecodeStructSlice[Byte32](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field11 = field
	}
	{
		field, n, err := scale.DecodeSliceOfByteSlice(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field12 = field
	}
	{
		field, n, err := scale.DecodeStructSlice[Struct](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Field13 = field
	}
	return total, nil
}
