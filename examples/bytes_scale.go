// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package examples

import (
	"github.com/spacemeshos/go-scale"
)

func (t *Bytes20) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.Value[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Bytes20) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.Value[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Bytes32) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.Value[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Bytes32) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.Value[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Bytes64) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.Value[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Bytes64) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.Value[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Slice) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.Value, 10)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Slice) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 10)
		if err != nil {
			return total, err
		}
		total += n
		t.Value = field
	}
	return total, nil
}
