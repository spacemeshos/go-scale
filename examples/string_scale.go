// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package examples

import (
	"github.com/spacemeshos/go-scale"
)

func (t *StructWithString) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeString(enc, t.Value)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *StructWithString) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeString(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Value = field
	}
	return total, nil
}

func (t *StructWithStringLimit) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStringWithLimit(enc, t.Value, 3)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *StructWithStringLimit) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStringWithLimit(dec, 3)
		if err != nil {
			return total, err
		}
		total += n
		t.Value = field
	}
	return total, nil
}

func (t *StructWithStringSliceAndLimit) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStringSliceWithLimit(enc, t.Value, 3)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *StructWithStringSliceAndLimit) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStringSliceWithLimit(dec, 3)
		if err != nil {
			return total, err
		}
		total += n
		t.Value = field
	}
	return total, nil
}
