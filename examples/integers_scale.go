// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

package examples

import (
	"github.com/spacemeshos/go-scale"
)

func (t *U8) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := scale.EncodeCompact8(enc, uint8(t.Value)); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *U8) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Value = uint8(field)
	}
	return total, nil
}

func (t *U16) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := scale.EncodeCompact16(enc, uint16(t.Value)); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *U16) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if field, n, err := scale.DecodeCompact16(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Value = uint16(field)
	}
	return total, nil
}

func (t *U32) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := scale.EncodeCompact32(enc, uint32(t.Value)); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *U32) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if field, n, err := scale.DecodeCompact32(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Value = uint32(field)
	}
	return total, nil
}

func (t *U64) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := scale.EncodeCompact64(enc, uint64(t.Value)); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *U64) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Value = uint64(field)
	}
	return total, nil
}
